<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>Ferren Dash</title>
  <meta content="width=device-width, initial-scale=1.0" name="viewport">
  <meta content="[Ferren Dash](https://discord.gg/4TeeFAdnuD)" name="keywords">
  <meta content="Ferren Dash, Website for the discord bot Ferren! changelogs news latest post updated here!"
    name="description">
  <meta name="theme-color" content="#efc75e">
  <meta property="og:image" content="/FerrenBot.png">
  <meta property="og:url" content="https://ferren.fr.to/">
  <link href="/FerrenBot.png" rel="icon">
  <!-- Google Web Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Barlow:wght@500;600;700&family=Open+Sans:wght@400;600&display=swap"
    rel="stylesheet">

  <!-- Icon Font Stylesheet -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">

  <!-- Customized Bootstrap Stylesheet -->
  <% for (const link of css) { %>
    <link rel="stylesheet" href="<%= link %>">
    <% } %>
<style>
  .offline {
    height: 20px;
    width: 0.375rem;
    border-radius: 999px;
    background: #DF484A;
  }
  .online {
    height: 20px;
    width: 0.375rem;
    border-radius: 999px;
    background: #efc75e;
  }
  .monitorBar {
    display: flex;
    -webkit-box-pack: justify;
    justify-content: space-between;
    width: 100%;
    max-width: 14.75rem;
  }
  .size2 {
    margin-left: 3%;
    margin-right: 3%;
  }
  .service-item-2 {
    width: 100% !important;
  }
</style>
</head>
<%- include('navbar') %>
  <div class="container-fluid bg-secondary p-0">
    <div class="row g-0">
      <div class="col-lg-6 py-6 px-5">
        <h1 class="display-5 mb-4">Status<span class="text-primary"> Page</span></h1>
        <h4 class="text-primary mb-4">All system operational!</h4>
      </div>
      <div class="dis-none col-lg-6">
        <div class="h-100 d-flex flex-column justify-content-center bg-primary p-5">
          <img class="imageferren"
            src="https://cdn.discordapp.com/attachments/1064773686550343722/1198302871402336338/FerrenBot.png">
        </div>
      </div>
    </div>
  </div>

  <div class="justify-content-center container-fluid " style="padding-right: 45px; padding-left: 45px;">
    <div class="text-center mx-auto mb-5" style="max-width: 600px;">
      <hr class="w-25 mx-auto bg-primary">
      <h1 class="display-5 mb-0">Services!</h1>
      <hr class="w-25 mx-auto bg-primary">
    </div>
    <!-- PC -->
    <div class="my-2" style="display: flex !important; justify-content: center;">
      <div class="service-item-2 size2 my-2" style="display: inline-block;">
          <div class="monitor-list">
              <% dataMonitor.forEach(function(monitor) { %>
                  <div class="monitor-row">
                      <div class="flex flex-bw flex-wrap">
                          <div class="monitor-row-header flex text-align-start">
                              <% const monitorper = data.psp.monitors.find(m => m.monitorId === monitor.monitorId); %>
                              <%= monitor.data.friendlyName %> | <span class="percentage">
                                  <%= monitorper['90dRatio'].ratio %>%
                              </span>
                          </div>
                          <div class="text-align-end">
                              <% if (monitor.data.status === "UP") { %>
                                  <span class="dot-success"></span>
                                  <span class="operational text-align-end">Operational</span>
                              <% } else { %>
                                  <span class="dot-down"></span>
                                  <span class="down text-align-end">Down</span>
                              <% } %>
                          </div>
                      </div>
                      <% if (monitor.data.lastDayUptimes && monitor.data.lastDayUptimes.histogram) { %>
                          <div class="monitor-chart">
                              <div class="monitorBar">
                                  <% monitor.data.lastDayUptimes.histogram.forEach(function(uptimeData, index) { %>
                                      <div class="<%= (uptimeData.uptime === 1 ? 'online' : 'offline') %>"></div>
                                  <% }); %>
                              </div>
                          </div>
                      <% } else { %>
                          <div class="monitor-chart">
                              <p></p>
                              <p>Graph data not available...</p>
                          </div>
                      <% } %>
                  </div>
              <% }); %>
          </div>
      </div>
  
    <div class="service-item-2 size2 my-2 d-none d-lg-block" style="display: inline-block;">
      <div class="flex flex-bw flex-wrap">
          <div class="monitor-row-header flex text-align-start">API Response Time</div>
          <div class="text-align-end">
              <span class="dot-success"></span>
              <span id="avgData" class="operational text-align-end"></span>
          </div>
      </div>
      <canvas id="myChart" height="160"></canvas>
  </div>
</div>
    <div class="d-block d-lg-none service-item-2 size my-2">
      <div class="flex flex-bw flex-wrap">
        <div class="monitor-row-header flex text-align-start">API Response Time</div>
        <div class="text-align-end">
          <span class="dot-success"></span> <span id="avgData2" class="operational text-align-end"></span>
        </div>
      </div>

        <canvas id="myChart2" height="100"></canvas>
    </div>
  </div>

  <%- include('footer') %>

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="lib/easing/easing.min.js"></script>
  <script src="lib/waypoints/waypoints.min.js"></script>
  <script src="lib/owlcarousel/owl.carousel.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <script>
    async function chart() {
      const ctx = document.getElementById('myChart').getContext('2d');
      const data = await fetch("bootstrap-bundle-min-js", {
        method: "POST",
      })
      const response = await data.json();
      const responseTimes = response.responseTimes.map(([timestamp, responseTime]) => ({
        x: new Date(timestamp * 1000),
        y: responseTime,
      }));
      const skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;
      const down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: responseTimes.map(entry => entry.x),
          datasets: [{
            label: 'API Response Time',
            data: responseTimes.map(entry => entry.y),
            backgroundColor: 'rgba(239, 199, 94, 0.2)',
            borderColor: 'rgba(239, 199, 94, 1)',
            borderWidth: 1,
            segment: {
              borderColor: ctx => skipped(ctx, 'rgb(0,0,0,0.2)') || down(ctx, 'rgb(192,75,75)'),
              borderDash: ctx => skipped(ctx, [6, 6]),
            },
            spanGaps: true
          }]
        },
        options: {
          interaction: {
            intersect: false
          },
          responsive: true,
          plugins: {
            tooltip: {
              mode: 'index',
              intersect: false
            },
          },
          hover: {
            mode: 'index',
            intersec: true
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                stepSize: 500,
              },
              max: 1000
            },
            x: {
              display: false,
              ticks: {
                stepSize: 500,
              },
            },
          }
        }
      });
    };
    chart()
    setInterval(() => {
      chart()
    }, 10000)
  </script>
  <script>
    async function chart2() {
      const ctx = document.getElementById('myChart2').getContext('2d');
      const data = await fetch("bootstrap-bundle-min-js-2", {
        method: "POST",
      });
      const response = await data.json();
      const responseTimes = response.responseTimes.map(([timestamp, responseTime]) => ({
        x: new Date(timestamp * 1000),
        y: responseTime,
      }));
      const skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;
      const down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: responseTimes.map(entry => entry.x),
          datasets: [{
            label: 'API Response Time',
            data: responseTimes.map(entry => entry.y),
            backgroundColor: 'rgba(239, 199, 94, 0.2)',
            borderColor: 'rgba(239, 199, 94, 1)',
            borderWidth: 1,
            segment: {
              borderColor: ctx => skipped(ctx, 'rgb(0,0,0,0.2)') || down(ctx, 'rgb(192,75,75)'),
              borderDash: ctx => skipped(ctx, [6, 6]),
            },
            spanGaps: true
          }]
        },
        options: {
          interaction: {
            intersect: false
          },
          responsive: true,
          plugins: {
            tooltip: {
              mode: 'index',
              intersect: false
            },
          },
          hover: {
            mode: 'index',
            intersec: true
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                stepSize: 500,
              },
              max: 1000
            },
            x: {
              display: false,
              ticks: {
                stepSize: 500,
              },
            },
          }
        }
      });
    };
    chart2()
    setTimeout(() => {
      chart2()
    }, 10000)
  </script>
  <script>
    async function avg() {
      const data = await fetch("jquery-bundle-min-js")
      const reponse = await data.json();
      document.getElementById("avgData").innerHTML = reponse.value
      document.getElementById("avgData2").innerHTML = reponse.value
    }
    avg()
  </script>
  </body>
</html>